// Copyright 2020 The Gitea Authors. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.
// Code generated by go generate; DO NOT EDIT.
package base

import (
	"code.gitea.io/gitea/models"
	"code.gitea.io/gitea/modules/repository"
)

// NullNotifier implements a blank notifier
type NullNotifier struct {
}

// Ensure that NullNotifier fulfils the Notifier interface
var (
	_ Notifier = &NullNotifier{}
)

// NotifyCreateIssueComment is a placeholder function
func (*NullNotifier) NotifyCreateIssueComment(unknown0 *models.User, unknown1 *models.Repository, unknown2 *models.Issue, unknown3 *models.Comment) {
}

// NotifyCreateRef is a placeholder function
func (*NullNotifier) NotifyCreateRef(doer *models.User, repo *models.Repository, refType string, refFullName string) {
}

// NotifyCreateRepository is a placeholder function
func (*NullNotifier) NotifyCreateRepository(doer *models.User, u *models.User, repo *models.Repository) {
}

// NotifyDeleteComment is a placeholder function
func (*NullNotifier) NotifyDeleteComment(unknown0 *models.User, unknown1 *models.Comment) {}

// NotifyDeleteRef is a placeholder function
func (*NullNotifier) NotifyDeleteRef(doer *models.User, repo *models.Repository, refType string, refFullName string) {
}

// NotifyDeleteRelease is a placeholder function
func (*NullNotifier) NotifyDeleteRelease(doer *models.User, rel *models.Release) {}

// NotifyDeleteRepository is a placeholder function
func (*NullNotifier) NotifyDeleteRepository(doer *models.User, repo *models.Repository) {}

// NotifyForkRepository is a placeholder function
func (*NullNotifier) NotifyForkRepository(doer *models.User, oldRepo *models.Repository, repo *models.Repository) {
}

// NotifyIssueChangeAssignee is a placeholder function
func (*NullNotifier) NotifyIssueChangeAssignee(doer *models.User, issue *models.Issue, assignee *models.User, removed bool, comment *models.Comment) {
}

// NotifyIssueChangeContent is a placeholder function
func (*NullNotifier) NotifyIssueChangeContent(doer *models.User, issue *models.Issue, oldContent string) {
}

// NotifyIssueChangeLabels is a placeholder function
func (*NullNotifier) NotifyIssueChangeLabels(doer *models.User, issue *models.Issue, addedLabels []*models.Label, removedLabels []*models.Label) {
}

// NotifyIssueChangeMilestone is a placeholder function
func (*NullNotifier) NotifyIssueChangeMilestone(doer *models.User, issue *models.Issue, oldMilestoneID int64) {
}

// NotifyIssueChangeStatus is a placeholder function
func (*NullNotifier) NotifyIssueChangeStatus(unknown0 *models.User, unknown1 *models.Issue, unknown2 *models.Comment, unknown3 bool) {
}

// NotifyIssueChangeTitle is a placeholder function
func (*NullNotifier) NotifyIssueChangeTitle(doer *models.User, issue *models.Issue, oldTitle string) {
}

// NotifyIssueClearLabels is a placeholder function
func (*NullNotifier) NotifyIssueClearLabels(doer *models.User, issue *models.Issue) {}

// NotifyMergePullRequest is a placeholder function
func (*NullNotifier) NotifyMergePullRequest(unknown0 *models.PullRequest, unknown1 *models.User) {}

// NotifyMigrateRepository is a placeholder function
func (*NullNotifier) NotifyMigrateRepository(doer *models.User, u *models.User, repo *models.Repository) {
}

// NotifyNewIssue is a placeholder function
func (*NullNotifier) NotifyNewIssue(unknown0 *models.Issue) {}

// NotifyNewPullRequest is a placeholder function
func (*NullNotifier) NotifyNewPullRequest(unknown0 *models.PullRequest) {}

// NotifyNewRelease is a placeholder function
func (*NullNotifier) NotifyNewRelease(rel *models.Release) {}

// NotifyPullRequestChangeTargetBranch is a placeholder function
func (*NullNotifier) NotifyPullRequestChangeTargetBranch(doer *models.User, pr *models.PullRequest, oldBranch string) {
}

// NotifyPullRequestReview is a placeholder function
func (*NullNotifier) NotifyPullRequestReview(unknown0 *models.PullRequest, unknown1 *models.Review, unknown2 *models.Comment) {
}

// NotifyPullRequestSynchronized is a placeholder function
func (*NullNotifier) NotifyPullRequestSynchronized(doer *models.User, pr *models.PullRequest) {}

// NotifyPullReviewRequest is a placeholder function
func (*NullNotifier) NotifyPullReviewRequest(doer *models.User, issue *models.Issue, reviewer *models.User, isRequest bool, comment *models.Comment) {
}

// NotifyPushCommits is a placeholder function
func (*NullNotifier) NotifyPushCommits(pusher *models.User, repo *models.Repository, refName string, oldCommitID string, newCommitID string, commits *repository.PushCommits) {
}

// NotifyRenameRepository is a placeholder function
func (*NullNotifier) NotifyRenameRepository(doer *models.User, repo *models.Repository, oldRepoName string) {
}

// NotifySyncCreateRef is a placeholder function
func (*NullNotifier) NotifySyncCreateRef(doer *models.User, repo *models.Repository, refType string, refFullName string) {
}

// NotifySyncDeleteRef is a placeholder function
func (*NullNotifier) NotifySyncDeleteRef(doer *models.User, repo *models.Repository, refType string, refFullName string) {
}

// NotifySyncPushCommits is a placeholder function
func (*NullNotifier) NotifySyncPushCommits(pusher *models.User, repo *models.Repository, refName string, oldCommitID string, newCommitID string, commits *repository.PushCommits) {
}

// NotifyTransferRepository is a placeholder function
func (*NullNotifier) NotifyTransferRepository(doer *models.User, repo *models.Repository, oldOwnerName string) {
}

// NotifyUpdateComment is a placeholder function
func (*NullNotifier) NotifyUpdateComment(unknown0 *models.User, unknown1 *models.Comment, unknown2 string) {
}

// NotifyUpdateRelease is a placeholder function
func (*NullNotifier) NotifyUpdateRelease(doer *models.User, rel *models.Release) {}

// Run is a placeholder function
func (*NullNotifier) Run() {}
