// Copyright 2020 The Gitea Authors. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.
// Code generated by go generate; DO NOT EDIT.
package base

import (
	"encoding/json"

	"code.gitea.io/gitea/models"
	"code.gitea.io/gitea/modules/graceful"
	"code.gitea.io/gitea/modules/log"
	"code.gitea.io/gitea/modules/queue"
	"code.gitea.io/gitea/modules/repository"
)

// FunctionCall represents a function call with json.Marshaled arguments
type FunctionCall struct {
	Name string
	Args [][]byte
}

// QueueNotifier is a notifier queue
type QueueNotifier struct {
	name      string
	notifiers []Notifier
	internal  queue.Queue
}

// Ensure that QueueNotifier fulfils the Notifier interface
var (
	_ Notifier = &QueueNotifier{}
)

// NewQueueNotifier creates a notifier that queues notifications and on dequeueing sends them to the provided notifiers
func NewQueueNotifier(name string, notifiers []Notifier) Notifier {
	q := &QueueNotifier{
		name:      name,
		notifiers: notifiers,
	}
	q.internal = queue.CreateQueue(name, q.handle, &FunctionCall{})
	return q
}

// NewQueueNotifierWithHandle creates a notifier queue with a specific handler function
func NewQueueNotifierWithHandle(name string, handle queue.HandlerFunc) Notifier {
	q := &QueueNotifier{
		name: name,
	}
	q.internal = queue.CreateQueue(name, handle, &FunctionCall{})
	return q
}

func (q *QueueNotifier) handle(data ...queue.Data) {
	for _, datum := range data {
		call := datum.(*FunctionCall)
		var err error
		switch call.Name {
		case "NotifyCreateIssueComment":

			var unknown0 *models.User
			err = json.Unmarshal(call.Args[0], &unknown0)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyCreateIssueComment", err)
				continue
			}
			var unknown1 *models.Repository
			err = json.Unmarshal(call.Args[1], &unknown1)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Repository", "NotifyCreateIssueComment", err)
				continue
			}
			var unknown2 *models.Issue
			err = json.Unmarshal(call.Args[2], &unknown2)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "*models.Issue", "NotifyCreateIssueComment", err)
				continue
			}
			var unknown3 *models.Comment
			err = json.Unmarshal(call.Args[3], &unknown3)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[3]), "*models.Comment", "NotifyCreateIssueComment", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyCreateIssueComment(unknown0, unknown1, unknown2, unknown3)
			}
		case "NotifyCreateRef":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyCreateRef", err)
				continue
			}
			var repo *models.Repository
			err = json.Unmarshal(call.Args[1], &repo)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Repository", "NotifyCreateRef", err)
				continue
			}
			var refType string
			err = json.Unmarshal(call.Args[2], &refType)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "string", "NotifyCreateRef", err)
				continue
			}
			var refFullName string
			err = json.Unmarshal(call.Args[3], &refFullName)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[3]), "string", "NotifyCreateRef", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyCreateRef(doer, repo, refType, refFullName)
			}
		case "NotifyCreateRepository":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyCreateRepository", err)
				continue
			}
			var u *models.User
			err = json.Unmarshal(call.Args[1], &u)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.User", "NotifyCreateRepository", err)
				continue
			}
			var repo *models.Repository
			err = json.Unmarshal(call.Args[2], &repo)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "*models.Repository", "NotifyCreateRepository", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyCreateRepository(doer, u, repo)
			}
		case "NotifyDeleteComment":

			var unknown0 *models.User
			err = json.Unmarshal(call.Args[0], &unknown0)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyDeleteComment", err)
				continue
			}
			var unknown1 *models.Comment
			err = json.Unmarshal(call.Args[1], &unknown1)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Comment", "NotifyDeleteComment", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyDeleteComment(unknown0, unknown1)
			}
		case "NotifyDeleteRef":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyDeleteRef", err)
				continue
			}
			var repo *models.Repository
			err = json.Unmarshal(call.Args[1], &repo)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Repository", "NotifyDeleteRef", err)
				continue
			}
			var refType string
			err = json.Unmarshal(call.Args[2], &refType)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "string", "NotifyDeleteRef", err)
				continue
			}
			var refFullName string
			err = json.Unmarshal(call.Args[3], &refFullName)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[3]), "string", "NotifyDeleteRef", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyDeleteRef(doer, repo, refType, refFullName)
			}
		case "NotifyDeleteRelease":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyDeleteRelease", err)
				continue
			}
			var rel *models.Release
			err = json.Unmarshal(call.Args[1], &rel)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Release", "NotifyDeleteRelease", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyDeleteRelease(doer, rel)
			}
		case "NotifyDeleteRepository":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyDeleteRepository", err)
				continue
			}
			var repo *models.Repository
			err = json.Unmarshal(call.Args[1], &repo)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Repository", "NotifyDeleteRepository", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyDeleteRepository(doer, repo)
			}
		case "NotifyForkRepository":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyForkRepository", err)
				continue
			}
			var oldRepo *models.Repository
			err = json.Unmarshal(call.Args[1], &oldRepo)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Repository", "NotifyForkRepository", err)
				continue
			}
			var repo *models.Repository
			err = json.Unmarshal(call.Args[2], &repo)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "*models.Repository", "NotifyForkRepository", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyForkRepository(doer, oldRepo, repo)
			}
		case "NotifyIssueChangeAssignee":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyIssueChangeAssignee", err)
				continue
			}
			var issue *models.Issue
			err = json.Unmarshal(call.Args[1], &issue)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Issue", "NotifyIssueChangeAssignee", err)
				continue
			}
			var assignee *models.User
			err = json.Unmarshal(call.Args[2], &assignee)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "*models.User", "NotifyIssueChangeAssignee", err)
				continue
			}
			var removed bool
			err = json.Unmarshal(call.Args[3], &removed)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[3]), "bool", "NotifyIssueChangeAssignee", err)
				continue
			}
			var comment *models.Comment
			err = json.Unmarshal(call.Args[4], &comment)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[4]), "*models.Comment", "NotifyIssueChangeAssignee", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyIssueChangeAssignee(doer, issue, assignee, removed, comment)
			}
		case "NotifyIssueChangeContent":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyIssueChangeContent", err)
				continue
			}
			var issue *models.Issue
			err = json.Unmarshal(call.Args[1], &issue)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Issue", "NotifyIssueChangeContent", err)
				continue
			}
			var oldContent string
			err = json.Unmarshal(call.Args[2], &oldContent)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "string", "NotifyIssueChangeContent", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyIssueChangeContent(doer, issue, oldContent)
			}
		case "NotifyIssueChangeLabels":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyIssueChangeLabels", err)
				continue
			}
			var issue *models.Issue
			err = json.Unmarshal(call.Args[1], &issue)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Issue", "NotifyIssueChangeLabels", err)
				continue
			}
			var addedLabels []*models.Label
			err = json.Unmarshal(call.Args[2], &addedLabels)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "[]*models.Label", "NotifyIssueChangeLabels", err)
				continue
			}
			var removedLabels []*models.Label
			err = json.Unmarshal(call.Args[3], &removedLabels)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[3]), "[]*models.Label", "NotifyIssueChangeLabels", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyIssueChangeLabels(doer, issue, addedLabels, removedLabels)
			}
		case "NotifyIssueChangeMilestone":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyIssueChangeMilestone", err)
				continue
			}
			var issue *models.Issue
			err = json.Unmarshal(call.Args[1], &issue)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Issue", "NotifyIssueChangeMilestone", err)
				continue
			}
			var oldMilestoneID int64
			err = json.Unmarshal(call.Args[2], &oldMilestoneID)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "int64", "NotifyIssueChangeMilestone", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyIssueChangeMilestone(doer, issue, oldMilestoneID)
			}
		case "NotifyIssueChangeStatus":

			var unknown0 *models.User
			err = json.Unmarshal(call.Args[0], &unknown0)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyIssueChangeStatus", err)
				continue
			}
			var unknown1 *models.Issue
			err = json.Unmarshal(call.Args[1], &unknown1)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Issue", "NotifyIssueChangeStatus", err)
				continue
			}
			var unknown2 *models.Comment
			err = json.Unmarshal(call.Args[2], &unknown2)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "*models.Comment", "NotifyIssueChangeStatus", err)
				continue
			}
			var unknown3 bool
			err = json.Unmarshal(call.Args[3], &unknown3)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[3]), "bool", "NotifyIssueChangeStatus", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyIssueChangeStatus(unknown0, unknown1, unknown2, unknown3)
			}
		case "NotifyIssueChangeTitle":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyIssueChangeTitle", err)
				continue
			}
			var issue *models.Issue
			err = json.Unmarshal(call.Args[1], &issue)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Issue", "NotifyIssueChangeTitle", err)
				continue
			}
			var oldTitle string
			err = json.Unmarshal(call.Args[2], &oldTitle)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "string", "NotifyIssueChangeTitle", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyIssueChangeTitle(doer, issue, oldTitle)
			}
		case "NotifyIssueClearLabels":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyIssueClearLabels", err)
				continue
			}
			var issue *models.Issue
			err = json.Unmarshal(call.Args[1], &issue)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Issue", "NotifyIssueClearLabels", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyIssueClearLabels(doer, issue)
			}
		case "NotifyMergePullRequest":

			var unknown0 *models.PullRequest
			err = json.Unmarshal(call.Args[0], &unknown0)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.PullRequest", "NotifyMergePullRequest", err)
				continue
			}
			var unknown1 *models.User
			err = json.Unmarshal(call.Args[1], &unknown1)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.User", "NotifyMergePullRequest", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyMergePullRequest(unknown0, unknown1)
			}
		case "NotifyMigrateRepository":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyMigrateRepository", err)
				continue
			}
			var u *models.User
			err = json.Unmarshal(call.Args[1], &u)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.User", "NotifyMigrateRepository", err)
				continue
			}
			var repo *models.Repository
			err = json.Unmarshal(call.Args[2], &repo)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "*models.Repository", "NotifyMigrateRepository", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyMigrateRepository(doer, u, repo)
			}
		case "NotifyNewIssue":

			var unknown0 *models.Issue
			err = json.Unmarshal(call.Args[0], &unknown0)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.Issue", "NotifyNewIssue", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyNewIssue(unknown0)
			}
		case "NotifyNewPullRequest":

			var unknown0 *models.PullRequest
			err = json.Unmarshal(call.Args[0], &unknown0)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.PullRequest", "NotifyNewPullRequest", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyNewPullRequest(unknown0)
			}
		case "NotifyNewRelease":

			var rel *models.Release
			err = json.Unmarshal(call.Args[0], &rel)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.Release", "NotifyNewRelease", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyNewRelease(rel)
			}
		case "NotifyPullRequestChangeTargetBranch":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyPullRequestChangeTargetBranch", err)
				continue
			}
			var pr *models.PullRequest
			err = json.Unmarshal(call.Args[1], &pr)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.PullRequest", "NotifyPullRequestChangeTargetBranch", err)
				continue
			}
			var oldBranch string
			err = json.Unmarshal(call.Args[2], &oldBranch)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "string", "NotifyPullRequestChangeTargetBranch", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyPullRequestChangeTargetBranch(doer, pr, oldBranch)
			}
		case "NotifyPullRequestReview":

			var unknown0 *models.PullRequest
			err = json.Unmarshal(call.Args[0], &unknown0)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.PullRequest", "NotifyPullRequestReview", err)
				continue
			}
			var unknown1 *models.Review
			err = json.Unmarshal(call.Args[1], &unknown1)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Review", "NotifyPullRequestReview", err)
				continue
			}
			var unknown2 *models.Comment
			err = json.Unmarshal(call.Args[2], &unknown2)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "*models.Comment", "NotifyPullRequestReview", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyPullRequestReview(unknown0, unknown1, unknown2)
			}
		case "NotifyPullRequestSynchronized":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyPullRequestSynchronized", err)
				continue
			}
			var pr *models.PullRequest
			err = json.Unmarshal(call.Args[1], &pr)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.PullRequest", "NotifyPullRequestSynchronized", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyPullRequestSynchronized(doer, pr)
			}
		case "NotifyPullReviewRequest":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyPullReviewRequest", err)
				continue
			}
			var issue *models.Issue
			err = json.Unmarshal(call.Args[1], &issue)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Issue", "NotifyPullReviewRequest", err)
				continue
			}
			var reviewer *models.User
			err = json.Unmarshal(call.Args[2], &reviewer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "*models.User", "NotifyPullReviewRequest", err)
				continue
			}
			var isRequest bool
			err = json.Unmarshal(call.Args[3], &isRequest)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[3]), "bool", "NotifyPullReviewRequest", err)
				continue
			}
			var comment *models.Comment
			err = json.Unmarshal(call.Args[4], &comment)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[4]), "*models.Comment", "NotifyPullReviewRequest", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyPullReviewRequest(doer, issue, reviewer, isRequest, comment)
			}
		case "NotifyPushCommits":

			var pusher *models.User
			err = json.Unmarshal(call.Args[0], &pusher)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyPushCommits", err)
				continue
			}
			var repo *models.Repository
			err = json.Unmarshal(call.Args[1], &repo)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Repository", "NotifyPushCommits", err)
				continue
			}
			var refName string
			err = json.Unmarshal(call.Args[2], &refName)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "string", "NotifyPushCommits", err)
				continue
			}
			var oldCommitID string
			err = json.Unmarshal(call.Args[3], &oldCommitID)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[3]), "string", "NotifyPushCommits", err)
				continue
			}
			var newCommitID string
			err = json.Unmarshal(call.Args[4], &newCommitID)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[4]), "string", "NotifyPushCommits", err)
				continue
			}
			var commits *repository.PushCommits
			err = json.Unmarshal(call.Args[5], &commits)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[5]), "*repository.PushCommits", "NotifyPushCommits", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyPushCommits(pusher, repo, refName, oldCommitID, newCommitID, commits)
			}
		case "NotifyRenameRepository":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyRenameRepository", err)
				continue
			}
			var repo *models.Repository
			err = json.Unmarshal(call.Args[1], &repo)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Repository", "NotifyRenameRepository", err)
				continue
			}
			var oldRepoName string
			err = json.Unmarshal(call.Args[2], &oldRepoName)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "string", "NotifyRenameRepository", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyRenameRepository(doer, repo, oldRepoName)
			}
		case "NotifySyncCreateRef":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifySyncCreateRef", err)
				continue
			}
			var repo *models.Repository
			err = json.Unmarshal(call.Args[1], &repo)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Repository", "NotifySyncCreateRef", err)
				continue
			}
			var refType string
			err = json.Unmarshal(call.Args[2], &refType)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "string", "NotifySyncCreateRef", err)
				continue
			}
			var refFullName string
			err = json.Unmarshal(call.Args[3], &refFullName)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[3]), "string", "NotifySyncCreateRef", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifySyncCreateRef(doer, repo, refType, refFullName)
			}
		case "NotifySyncDeleteRef":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifySyncDeleteRef", err)
				continue
			}
			var repo *models.Repository
			err = json.Unmarshal(call.Args[1], &repo)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Repository", "NotifySyncDeleteRef", err)
				continue
			}
			var refType string
			err = json.Unmarshal(call.Args[2], &refType)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "string", "NotifySyncDeleteRef", err)
				continue
			}
			var refFullName string
			err = json.Unmarshal(call.Args[3], &refFullName)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[3]), "string", "NotifySyncDeleteRef", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifySyncDeleteRef(doer, repo, refType, refFullName)
			}
		case "NotifySyncPushCommits":

			var pusher *models.User
			err = json.Unmarshal(call.Args[0], &pusher)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifySyncPushCommits", err)
				continue
			}
			var repo *models.Repository
			err = json.Unmarshal(call.Args[1], &repo)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Repository", "NotifySyncPushCommits", err)
				continue
			}
			var refName string
			err = json.Unmarshal(call.Args[2], &refName)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "string", "NotifySyncPushCommits", err)
				continue
			}
			var oldCommitID string
			err = json.Unmarshal(call.Args[3], &oldCommitID)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[3]), "string", "NotifySyncPushCommits", err)
				continue
			}
			var newCommitID string
			err = json.Unmarshal(call.Args[4], &newCommitID)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[4]), "string", "NotifySyncPushCommits", err)
				continue
			}
			var commits *repository.PushCommits
			err = json.Unmarshal(call.Args[5], &commits)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[5]), "*repository.PushCommits", "NotifySyncPushCommits", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifySyncPushCommits(pusher, repo, refName, oldCommitID, newCommitID, commits)
			}
		case "NotifyTransferRepository":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyTransferRepository", err)
				continue
			}
			var repo *models.Repository
			err = json.Unmarshal(call.Args[1], &repo)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Repository", "NotifyTransferRepository", err)
				continue
			}
			var oldOwnerName string
			err = json.Unmarshal(call.Args[2], &oldOwnerName)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "string", "NotifyTransferRepository", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyTransferRepository(doer, repo, oldOwnerName)
			}
		case "NotifyUpdateComment":

			var unknown0 *models.User
			err = json.Unmarshal(call.Args[0], &unknown0)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyUpdateComment", err)
				continue
			}
			var unknown1 *models.Comment
			err = json.Unmarshal(call.Args[1], &unknown1)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Comment", "NotifyUpdateComment", err)
				continue
			}
			var unknown2 string
			err = json.Unmarshal(call.Args[2], &unknown2)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[2]), "string", "NotifyUpdateComment", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyUpdateComment(unknown0, unknown1, unknown2)
			}
		case "NotifyUpdateRelease":

			var doer *models.User
			err = json.Unmarshal(call.Args[0], &doer)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[0]), "*models.User", "NotifyUpdateRelease", err)
				continue
			}
			var rel *models.Release
			err = json.Unmarshal(call.Args[1], &rel)
			if err != nil {
				log.Error("Unable to unmarshal %s to %s in call to %s: %v", string(call.Args[1]), "*models.Release", "NotifyUpdateRelease", err)
				continue
			}
			for _, notifier := range q.notifiers {
				notifier.NotifyUpdateRelease(doer, rel)
			}
		case "Run":

			for _, notifier := range q.notifiers {
				notifier.Run()
			}
		default:
			log.Error("Unknown notifier function %s with %d arguments", call.Name, len(call.Args))
		}
	}
}

func (q *QueueNotifier) Run() {
	for _, notifier := range q.notifiers {
		go notifier.Run()
	}
	graceful.GetManager().RunWithShutdownFns(q.internal.Run)
}

// NotifyCreateIssueComment is a placeholder function
func (q *QueueNotifier) NotifyCreateIssueComment(unknown0 *models.User, unknown1 *models.Repository, unknown2 *models.Issue, unknown3 *models.Comment) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&unknown0)
	if err != nil {
		log.Error("Unable to marshall unknown0: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&unknown1)
	if err != nil {
		log.Error("Unable to marshall unknown1: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&unknown2)
	if err != nil {
		log.Error("Unable to marshall unknown2: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&unknown3)
	if err != nil {
		log.Error("Unable to marshall unknown3: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyCreateIssueComment",
		Args: args,
	})
}

// NotifyCreateRef is a placeholder function
func (q *QueueNotifier) NotifyCreateRef(doer *models.User, repo *models.Repository, refType string, refFullName string) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&repo)
	if err != nil {
		log.Error("Unable to marshall repo: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&refType)
	if err != nil {
		log.Error("Unable to marshall refType: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&refFullName)
	if err != nil {
		log.Error("Unable to marshall refFullName: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyCreateRef",
		Args: args,
	})
}

// NotifyCreateRepository is a placeholder function
func (q *QueueNotifier) NotifyCreateRepository(doer *models.User, u *models.User, repo *models.Repository) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&u)
	if err != nil {
		log.Error("Unable to marshall u: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&repo)
	if err != nil {
		log.Error("Unable to marshall repo: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyCreateRepository",
		Args: args,
	})
}

// NotifyDeleteComment is a placeholder function
func (q *QueueNotifier) NotifyDeleteComment(unknown0 *models.User, unknown1 *models.Comment) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&unknown0)
	if err != nil {
		log.Error("Unable to marshall unknown0: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&unknown1)
	if err != nil {
		log.Error("Unable to marshall unknown1: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyDeleteComment",
		Args: args,
	})
}

// NotifyDeleteRef is a placeholder function
func (q *QueueNotifier) NotifyDeleteRef(doer *models.User, repo *models.Repository, refType string, refFullName string) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&repo)
	if err != nil {
		log.Error("Unable to marshall repo: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&refType)
	if err != nil {
		log.Error("Unable to marshall refType: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&refFullName)
	if err != nil {
		log.Error("Unable to marshall refFullName: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyDeleteRef",
		Args: args,
	})
}

// NotifyDeleteRelease is a placeholder function
func (q *QueueNotifier) NotifyDeleteRelease(doer *models.User, rel *models.Release) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&rel)
	if err != nil {
		log.Error("Unable to marshall rel: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyDeleteRelease",
		Args: args,
	})
}

// NotifyDeleteRepository is a placeholder function
func (q *QueueNotifier) NotifyDeleteRepository(doer *models.User, repo *models.Repository) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&repo)
	if err != nil {
		log.Error("Unable to marshall repo: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyDeleteRepository",
		Args: args,
	})
}

// NotifyForkRepository is a placeholder function
func (q *QueueNotifier) NotifyForkRepository(doer *models.User, oldRepo *models.Repository, repo *models.Repository) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&oldRepo)
	if err != nil {
		log.Error("Unable to marshall oldRepo: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&repo)
	if err != nil {
		log.Error("Unable to marshall repo: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyForkRepository",
		Args: args,
	})
}

// NotifyIssueChangeAssignee is a placeholder function
func (q *QueueNotifier) NotifyIssueChangeAssignee(doer *models.User, issue *models.Issue, assignee *models.User, removed bool, comment *models.Comment) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&issue)
	if err != nil {
		log.Error("Unable to marshall issue: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&assignee)
	if err != nil {
		log.Error("Unable to marshall assignee: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&removed)
	if err != nil {
		log.Error("Unable to marshall removed: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&comment)
	if err != nil {
		log.Error("Unable to marshall comment: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyIssueChangeAssignee",
		Args: args,
	})
}

// NotifyIssueChangeContent is a placeholder function
func (q *QueueNotifier) NotifyIssueChangeContent(doer *models.User, issue *models.Issue, oldContent string) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&issue)
	if err != nil {
		log.Error("Unable to marshall issue: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&oldContent)
	if err != nil {
		log.Error("Unable to marshall oldContent: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyIssueChangeContent",
		Args: args,
	})
}

// NotifyIssueChangeLabels is a placeholder function
func (q *QueueNotifier) NotifyIssueChangeLabels(doer *models.User, issue *models.Issue, addedLabels []*models.Label, removedLabels []*models.Label) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&issue)
	if err != nil {
		log.Error("Unable to marshall issue: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&addedLabels)
	if err != nil {
		log.Error("Unable to marshall addedLabels: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&removedLabels)
	if err != nil {
		log.Error("Unable to marshall removedLabels: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyIssueChangeLabels",
		Args: args,
	})
}

// NotifyIssueChangeMilestone is a placeholder function
func (q *QueueNotifier) NotifyIssueChangeMilestone(doer *models.User, issue *models.Issue, oldMilestoneID int64) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&issue)
	if err != nil {
		log.Error("Unable to marshall issue: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&oldMilestoneID)
	if err != nil {
		log.Error("Unable to marshall oldMilestoneID: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyIssueChangeMilestone",
		Args: args,
	})
}

// NotifyIssueChangeStatus is a placeholder function
func (q *QueueNotifier) NotifyIssueChangeStatus(unknown0 *models.User, unknown1 *models.Issue, unknown2 *models.Comment, unknown3 bool) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&unknown0)
	if err != nil {
		log.Error("Unable to marshall unknown0: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&unknown1)
	if err != nil {
		log.Error("Unable to marshall unknown1: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&unknown2)
	if err != nil {
		log.Error("Unable to marshall unknown2: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&unknown3)
	if err != nil {
		log.Error("Unable to marshall unknown3: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyIssueChangeStatus",
		Args: args,
	})
}

// NotifyIssueChangeTitle is a placeholder function
func (q *QueueNotifier) NotifyIssueChangeTitle(doer *models.User, issue *models.Issue, oldTitle string) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&issue)
	if err != nil {
		log.Error("Unable to marshall issue: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&oldTitle)
	if err != nil {
		log.Error("Unable to marshall oldTitle: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyIssueChangeTitle",
		Args: args,
	})
}

// NotifyIssueClearLabels is a placeholder function
func (q *QueueNotifier) NotifyIssueClearLabels(doer *models.User, issue *models.Issue) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&issue)
	if err != nil {
		log.Error("Unable to marshall issue: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyIssueClearLabels",
		Args: args,
	})
}

// NotifyMergePullRequest is a placeholder function
func (q *QueueNotifier) NotifyMergePullRequest(unknown0 *models.PullRequest, unknown1 *models.User) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&unknown0)
	if err != nil {
		log.Error("Unable to marshall unknown0: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&unknown1)
	if err != nil {
		log.Error("Unable to marshall unknown1: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyMergePullRequest",
		Args: args,
	})
}

// NotifyMigrateRepository is a placeholder function
func (q *QueueNotifier) NotifyMigrateRepository(doer *models.User, u *models.User, repo *models.Repository) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&u)
	if err != nil {
		log.Error("Unable to marshall u: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&repo)
	if err != nil {
		log.Error("Unable to marshall repo: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyMigrateRepository",
		Args: args,
	})
}

// NotifyNewIssue is a placeholder function
func (q *QueueNotifier) NotifyNewIssue(unknown0 *models.Issue) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&unknown0)
	if err != nil {
		log.Error("Unable to marshall unknown0: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyNewIssue",
		Args: args,
	})
}

// NotifyNewPullRequest is a placeholder function
func (q *QueueNotifier) NotifyNewPullRequest(unknown0 *models.PullRequest) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&unknown0)
	if err != nil {
		log.Error("Unable to marshall unknown0: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyNewPullRequest",
		Args: args,
	})
}

// NotifyNewRelease is a placeholder function
func (q *QueueNotifier) NotifyNewRelease(rel *models.Release) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&rel)
	if err != nil {
		log.Error("Unable to marshall rel: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyNewRelease",
		Args: args,
	})
}

// NotifyPullRequestChangeTargetBranch is a placeholder function
func (q *QueueNotifier) NotifyPullRequestChangeTargetBranch(doer *models.User, pr *models.PullRequest, oldBranch string) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&pr)
	if err != nil {
		log.Error("Unable to marshall pr: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&oldBranch)
	if err != nil {
		log.Error("Unable to marshall oldBranch: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyPullRequestChangeTargetBranch",
		Args: args,
	})
}

// NotifyPullRequestReview is a placeholder function
func (q *QueueNotifier) NotifyPullRequestReview(unknown0 *models.PullRequest, unknown1 *models.Review, unknown2 *models.Comment) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&unknown0)
	if err != nil {
		log.Error("Unable to marshall unknown0: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&unknown1)
	if err != nil {
		log.Error("Unable to marshall unknown1: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&unknown2)
	if err != nil {
		log.Error("Unable to marshall unknown2: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyPullRequestReview",
		Args: args,
	})
}

// NotifyPullRequestSynchronized is a placeholder function
func (q *QueueNotifier) NotifyPullRequestSynchronized(doer *models.User, pr *models.PullRequest) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&pr)
	if err != nil {
		log.Error("Unable to marshall pr: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyPullRequestSynchronized",
		Args: args,
	})
}

// NotifyPullReviewRequest is a placeholder function
func (q *QueueNotifier) NotifyPullReviewRequest(doer *models.User, issue *models.Issue, reviewer *models.User, isRequest bool, comment *models.Comment) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&issue)
	if err != nil {
		log.Error("Unable to marshall issue: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&reviewer)
	if err != nil {
		log.Error("Unable to marshall reviewer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&isRequest)
	if err != nil {
		log.Error("Unable to marshall isRequest: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&comment)
	if err != nil {
		log.Error("Unable to marshall comment: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyPullReviewRequest",
		Args: args,
	})
}

// NotifyPushCommits is a placeholder function
func (q *QueueNotifier) NotifyPushCommits(pusher *models.User, repo *models.Repository, refName string, oldCommitID string, newCommitID string, commits *repository.PushCommits) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&pusher)
	if err != nil {
		log.Error("Unable to marshall pusher: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&repo)
	if err != nil {
		log.Error("Unable to marshall repo: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&refName)
	if err != nil {
		log.Error("Unable to marshall refName: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&oldCommitID)
	if err != nil {
		log.Error("Unable to marshall oldCommitID: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&newCommitID)
	if err != nil {
		log.Error("Unable to marshall newCommitID: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&commits)
	if err != nil {
		log.Error("Unable to marshall commits: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyPushCommits",
		Args: args,
	})
}

// NotifyRenameRepository is a placeholder function
func (q *QueueNotifier) NotifyRenameRepository(doer *models.User, repo *models.Repository, oldRepoName string) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&repo)
	if err != nil {
		log.Error("Unable to marshall repo: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&oldRepoName)
	if err != nil {
		log.Error("Unable to marshall oldRepoName: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyRenameRepository",
		Args: args,
	})
}

// NotifySyncCreateRef is a placeholder function
func (q *QueueNotifier) NotifySyncCreateRef(doer *models.User, repo *models.Repository, refType string, refFullName string) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&repo)
	if err != nil {
		log.Error("Unable to marshall repo: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&refType)
	if err != nil {
		log.Error("Unable to marshall refType: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&refFullName)
	if err != nil {
		log.Error("Unable to marshall refFullName: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifySyncCreateRef",
		Args: args,
	})
}

// NotifySyncDeleteRef is a placeholder function
func (q *QueueNotifier) NotifySyncDeleteRef(doer *models.User, repo *models.Repository, refType string, refFullName string) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&repo)
	if err != nil {
		log.Error("Unable to marshall repo: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&refType)
	if err != nil {
		log.Error("Unable to marshall refType: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&refFullName)
	if err != nil {
		log.Error("Unable to marshall refFullName: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifySyncDeleteRef",
		Args: args,
	})
}

// NotifySyncPushCommits is a placeholder function
func (q *QueueNotifier) NotifySyncPushCommits(pusher *models.User, repo *models.Repository, refName string, oldCommitID string, newCommitID string, commits *repository.PushCommits) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&pusher)
	if err != nil {
		log.Error("Unable to marshall pusher: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&repo)
	if err != nil {
		log.Error("Unable to marshall repo: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&refName)
	if err != nil {
		log.Error("Unable to marshall refName: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&oldCommitID)
	if err != nil {
		log.Error("Unable to marshall oldCommitID: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&newCommitID)
	if err != nil {
		log.Error("Unable to marshall newCommitID: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&commits)
	if err != nil {
		log.Error("Unable to marshall commits: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifySyncPushCommits",
		Args: args,
	})
}

// NotifyTransferRepository is a placeholder function
func (q *QueueNotifier) NotifyTransferRepository(doer *models.User, repo *models.Repository, oldOwnerName string) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&repo)
	if err != nil {
		log.Error("Unable to marshall repo: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&oldOwnerName)
	if err != nil {
		log.Error("Unable to marshall oldOwnerName: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyTransferRepository",
		Args: args,
	})
}

// NotifyUpdateComment is a placeholder function
func (q *QueueNotifier) NotifyUpdateComment(unknown0 *models.User, unknown1 *models.Comment, unknown2 string) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&unknown0)
	if err != nil {
		log.Error("Unable to marshall unknown0: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&unknown1)
	if err != nil {
		log.Error("Unable to marshall unknown1: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&unknown2)
	if err != nil {
		log.Error("Unable to marshall unknown2: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyUpdateComment",
		Args: args,
	})
}

// NotifyUpdateRelease is a placeholder function
func (q *QueueNotifier) NotifyUpdateRelease(doer *models.User, rel *models.Release) {
	args := make([][]byte, 0)
	var err error
	var bs []byte
	bs, err = json.Marshal(&doer)
	if err != nil {
		log.Error("Unable to marshall doer: %v", err)
		return
	}
	args = append(args, bs)
	bs, err = json.Marshal(&rel)
	if err != nil {
		log.Error("Unable to marshall rel: %v", err)
		return
	}
	args = append(args, bs)

	q.internal.Push(&FunctionCall{
		Name: "NotifyUpdateRelease",
		Args: args,
	})
}
